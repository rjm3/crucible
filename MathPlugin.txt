Functions
=============
Parameters in [] are optional

getIntRandom( [%range] )
%range = 1-999,999(999,999 because of tribes)
return value between 0 and %range-1, if %range is not specified 0 and max_rand (google it)

getRandom()
returns random number between 0 <= x < 1

SeedRandom( %seed, [any value to display info])
%seed of 0 initializes it using the system clock, otherwise seed using the %seed (int)

getIntRandomMT( [lowerRange], [higherRange] )
lowerRange = -99,999 - 999,998(999,998 because of tribes)
higherRange = -99,998 - 999,999 (Must be larger than lowerRange)
Must set both lowerRange and upperRange to use, or neither of them
return value between lowerRange and higherRange, if %range is not specified 0 and max_rand (google it)

getRandomMT()
returns random number between 0 <= x < 1

SeedRandomMT( %seed, [any value to display info])
%seed of 0 initializes it random_device which is a slower method of random, but uses many different factors to obtain a truly random seed, otherwise seed using the %seed (int)

getSHA256( string )
returns "H [num1] ... [num8] H"

cos,sin,tan	- Trig functions
acos,asin	- Inverse functions
atan ( %val1 ) or atan( %val1, %val2 )
I would recommend using %val2, as it will allow %val2 to be zero.
If %val2 is not supplied it assumes %val1 has the ratio (opposite/adjacent)

deg2rag(%rad), rad2deg(%degree)

Math::Log( %num, [%base] )
%base assumed to be "e"

ceil( %num )
like floor but ceils the number instead

round( %num, [%precision] ) / round2(...) in case you can't find where function round was defined in scripts
%precision = how many decimal places to go

Vector::rotate ( %vector, %rotation )
returns the %vector with the %rotation applied  (Good for keeping an object at a certain
point relative to another object)

Rotation::rotate ( %original, %rotation)
returns the %orignal rot as if rotated by %rotation (handy for #addrot)

Gamebase::setRelative(%parent, %child, %relpos, %relrot)
To use this, think of the parent being at pos 0 0 0 at rot 0 0 0, place the %child where
you want it to be (including rotation).  This point and rotation is your %relpos and %relrot
if the parent gets rotated or position moved everything will be moved with it

Math::isInteger( %str )
Checks whether a number is an integer (negative or positive, no decimals)

Variables
==============
$pi
$e